openapi: 3.0.3
info:
  title: GM Properties API
  description: OpenAPI-Spezifikation der GM Properties-API
  version: 1.0.0

paths:
  /api/tenants:
    get:
      security:
        - BearerAuth: [ ]
      tags:
        - "Tenants"
      summary: "Tenant Liste abfragen"
      description: "Gibt alle Tenants zurück. Optional kann nach tier gefiltert werden."
      operationId: "listTenants"
      parameters:
        - name: "tier"
          in: query
          description: "Abbo Stufe des Tenant Entry, Enhanced oder Premium"
          required: false
          schema:
            type: string
            enum: [ "Entry", "Enhanced", "Premium" ]
      responses:
        '200':
          description: "Liste der Tenants erfolgreich zurückgegeben"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tenant'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      security:
        - BearerAuth: [ ]
      tags:
        - "Tenants"
      summary: "Tenant hinzufügen"
      description: "Fügt einen neuen Tenant hinzu"
      operationId: "addTenant"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                tenant:
                  $ref: '#/components/schemas/Tenant'
      responses:
        '201':
          description: "Tenant wurde erfolgreich erstellt"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/tenant/{id}:
    get:
      security:
        - BearerAuth: [ ]
      tags:
        - "Tenants"
      summary: "Tenant per ID abrufen"
      description: "Gibt einen spezifischen Tenant anhand der ID zurück"
      operationId: "getTenantById"
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Der Tenant wurde gefunden und zurückgegeben"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        '404':
          description: "Tenant mit der angegebenen ID wurde nicht gefunden"
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      security:
        - BearerAuth: [ ]
      tags:
        - "Tenant"
      summary: "Tenant aktualisieren"
      description: "Aktualisiert einen spezifischen Tenant anhand der ID"
      operationId: "updateTenant"
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tenant'
      responses:
        '200':
          description: "Tenant wurde erfolgreich aktualisiert"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: "Tenant mit der angegebenen ID wurde nicht gefunden"
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      security:
        - BearerAuth: [ ]
      tags:
        - "Tenants"
      summary: "Tenant löschen"
      description: "Löscht einen spezifischen Tenant anhand der ID"
      operationId: "deleteTenant"
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: "Tenant wurde erfolgreich gelöscht"
        '404':
          description: "Tenant mit der angegebenen ID wurde nicht gefunden"
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'


components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Tenant:
      description: "Tenant der Anwendung"
      type: object
      properties:
        id:
          description: "Id"
          type: string
        name:
          description: "Der Name des Tenant"
          type: string
        tier:
          description: "Abo Stufe des Tenant"
          type: string
          enum: [ "Entry", "Enhanced", "Premium" ]
        services:
          description: "Die Namen bzw. ids der Services"
          $ref: '#/components/schemas/Services'

    Services:
      type: object
      properties:
        finance-backend:
          description: "Das Finanz Backend"
          $ref: '#/components/schemas/Service'
        property-backend:
          description: "Das Property Backend"
          $ref: '#/components/schemas/Service'
        parking-backend:
          description: "Das Parking Backend"
          $ref: '#/components/schemas/Service'
        payment-watcher:
          description: "der PaymentWatcher Service"
          $ref: '#/components/schemas/Service'
        report-generation-worker:
          description: "Report generation Worker "
          $ref: '#/components/schemas/Service'
        management-frontend:
          description: "das Management Frontend"
          $ref: '#/components/schemas/Service'
        parking-frontend:
          description: "das Parking Frontend"
          $ref: '#/components/schemas/Service'
        property-db:
          description: "Die Property DB"
          $ref: '#/components/schemas/Service'
        parking-db:
          description: "Die Parking DB"
          $ref: '#/components/schemas/Service'
        storage:
            description: "Der Filestorage"
            $ref: '#/components/schemas/Service'

    Service:
      type: object
      properties:
        name:
          description: "name oder id des Service"
          type: string
        url:
          description: "url des Service"
          type: string
        region:
          description: "region des Service"
          type: string


    ErrorResponse:
      description: "Basis Fehler-Response ohne Detailangaben"
      type: object
      properties:
        message:
          description: "Fehlermeldung"
          type: string
      required:
        - "message"


  responses:
    BadRequest:
      description: Fehlerhafte Anfrage
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: Die angeforderte Ressource wurde nicht gefunden.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'