/* tslint:disable */
/* eslint-disable */
/**
 * GM-Owner API
 * OpenAPI-Spezifikation der owner-API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Service } from './Service';
import {
    ServiceFromJSON,
    ServiceFromJSONTyped,
    ServiceToJSON,
    ServiceToJSONTyped,
} from './Service';

/**
 * 
 * @export
 * @interface Services
 */
export interface Services {
    /**
     * 
     * @type {Service}
     * @memberof Services
     */
    financeBackend?: Service;
    /**
     * 
     * @type {Service}
     * @memberof Services
     */
    propertyBackend?: Service;
    /**
     * 
     * @type {Service}
     * @memberof Services
     */
    parkingBackend?: Service;
    /**
     * 
     * @type {Service}
     * @memberof Services
     */
    paymentWatcher?: Service;
    /**
     * 
     * @type {Service}
     * @memberof Services
     */
    reportGenerationWorker?: Service;
    /**
     * 
     * @type {Service}
     * @memberof Services
     */
    managementFrontend?: Service;
    /**
     * 
     * @type {Service}
     * @memberof Services
     */
    parkingFrontend?: Service;
    /**
     * 
     * @type {Service}
     * @memberof Services
     */
    propertyDb?: Service;
    /**
     * 
     * @type {Service}
     * @memberof Services
     */
    parkingDb?: Service;
    /**
     * 
     * @type {Service}
     * @memberof Services
     */
    storage?: Service;
}

/**
 * Check if a given object implements the Services interface.
 */
export function instanceOfServices(value: object): value is Services {
    return true;
}

export function ServicesFromJSON(json: any): Services {
    return ServicesFromJSONTyped(json, false);
}

export function ServicesFromJSONTyped(json: any, ignoreDiscriminator: boolean): Services {
    if (json == null) {
        return json;
    }
    return {
        
        'financeBackend': json['finance-backend'] == null ? undefined : ServiceFromJSON(json['finance-backend']),
        'propertyBackend': json['property-backend'] == null ? undefined : ServiceFromJSON(json['property-backend']),
        'parkingBackend': json['parking-backend'] == null ? undefined : ServiceFromJSON(json['parking-backend']),
        'paymentWatcher': json['payment-watcher'] == null ? undefined : ServiceFromJSON(json['payment-watcher']),
        'reportGenerationWorker': json['report-generation-worker'] == null ? undefined : ServiceFromJSON(json['report-generation-worker']),
        'managementFrontend': json['management-frontend'] == null ? undefined : ServiceFromJSON(json['management-frontend']),
        'parkingFrontend': json['parking-frontend'] == null ? undefined : ServiceFromJSON(json['parking-frontend']),
        'propertyDb': json['property-db'] == null ? undefined : ServiceFromJSON(json['property-db']),
        'parkingDb': json['parking-db'] == null ? undefined : ServiceFromJSON(json['parking-db']),
        'storage': json['storage'] == null ? undefined : ServiceFromJSON(json['storage']),
    };
}

  export function ServicesToJSON(json: any): Services {
      return ServicesToJSONTyped(json, false);
  }

  export function ServicesToJSONTyped(value?: Services | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'finance-backend': ServiceToJSON(value['financeBackend']),
        'property-backend': ServiceToJSON(value['propertyBackend']),
        'parking-backend': ServiceToJSON(value['parkingBackend']),
        'payment-watcher': ServiceToJSON(value['paymentWatcher']),
        'report-generation-worker': ServiceToJSON(value['reportGenerationWorker']),
        'management-frontend': ServiceToJSON(value['managementFrontend']),
        'parking-frontend': ServiceToJSON(value['parkingFrontend']),
        'property-db': ServiceToJSON(value['propertyDb']),
        'parking-db': ServiceToJSON(value['parkingDb']),
        'storage': ServiceToJSON(value['storage']),
    };
}

