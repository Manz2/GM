/* tslint:disable */
/* eslint-disable */
/**
 * GM Parking API
 * OpenAPI-Spezifikation der GM Parking-API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  Occupancy,
  Ticket,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    OccupancyFromJSON,
    OccupancyToJSON,
    TicketFromJSON,
    TicketToJSON,
} from '../models/index';

export interface GetPriceRequest {
    ticketId: string;
}

export interface IsTicketPayedRequest {
    ticketId: string;
}

export interface MarkTicketPayedRequest {
    ticketId: string;
}

export interface OccupancyRequest {
    propertyId: string;
}

export interface RequestEntryRequest {
    propertyId: string;
}

export interface RequestExitRequest {
    propertyId: string;
    ticketId: string;
}

/**
 * 
 */
export class ParkingApi extends runtime.BaseAPI {

    /**
     * Gibt den Preis des Tickets zurück
     */
    async getPriceRaw(requestParameters: GetPriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters['ticketId'] == null) {
            throw new runtime.RequiredError(
                'ticketId',
                'Required parameter "ticketId" was null or undefined when calling getPrice().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ticketId'] != null) {
            queryParameters['ticketId'] = requestParameters['ticketId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/parking/getPrice`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Gibt den Preis des Tickets zurück
     */
    async getPrice(requestParameters: GetPriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.getPriceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fragt ab, ob ein Ticket bezahlt wurde
     */
    async isTicketPayedRaw(requestParameters: IsTicketPayedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ticketId'] == null) {
            throw new runtime.RequiredError(
                'ticketId',
                'Required parameter "ticketId" was null or undefined when calling isTicketPayed().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ticketId'] != null) {
            queryParameters['ticketId'] = requestParameters['ticketId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/parking/isTicketPayed`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fragt ab, ob ein Ticket bezahlt wurde
     */
    async isTicketPayed(requestParameters: IsTicketPayedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.isTicketPayedRaw(requestParameters, initOverrides);
    }

    /**
     * Ein Ticket als bezahlt markieren
     */
    async markTicketPayedRaw(requestParameters: MarkTicketPayedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ticketId'] == null) {
            throw new runtime.RequiredError(
                'ticketId',
                'Required parameter "ticketId" was null or undefined when calling markTicketPayed().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ticketId'] != null) {
            queryParameters['ticketId'] = requestParameters['ticketId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/parking/markTicketPayed`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Ein Ticket als bezahlt markieren
     */
    async markTicketPayed(requestParameters: MarkTicketPayedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.markTicketPayedRaw(requestParameters, initOverrides);
    }

    /**
     * Liefert die Auslastung eines Parkhauses
     */
    async occupancyRaw(requestParameters: OccupancyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Occupancy>> {
        if (requestParameters['propertyId'] == null) {
            throw new runtime.RequiredError(
                'propertyId',
                'Required parameter "propertyId" was null or undefined when calling occupancy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['propertyId'] != null) {
            queryParameters['propertyId'] = requestParameters['propertyId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/parking/occupancy`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OccupancyFromJSON(jsonValue));
    }

    /**
     * Liefert die Auslastung eines Parkhauses
     */
    async occupancy(requestParameters: OccupancyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Occupancy> {
        const response = await this.occupancyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fragt an, ob ein Fahrzeug eingelassen werden kann. Falls ja wird ein entsprechendes Ticket erstellt und zurückgegeben
     * Einfahrt eines Fahrzeugs anfragen
     */
    async requestEntryRaw(requestParameters: RequestEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Ticket>> {
        if (requestParameters['propertyId'] == null) {
            throw new runtime.RequiredError(
                'propertyId',
                'Required parameter "propertyId" was null or undefined when calling requestEntry().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['propertyId'] != null) {
            queryParameters['propertyId'] = requestParameters['propertyId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/parking/requestEntry`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketFromJSON(jsonValue));
    }

    /**
     * Fragt an, ob ein Fahrzeug eingelassen werden kann. Falls ja wird ein entsprechendes Ticket erstellt und zurückgegeben
     * Einfahrt eines Fahrzeugs anfragen
     */
    async requestEntry(requestParameters: RequestEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Ticket | null | undefined > {
        const response = await this.requestEntryRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * Prüft, ob ein Fahrzeug das Parkhaus verlassen kann. Wenn das Ticket als bezahlt markiert ist, wird die Ausfahrt genehmigt.
     * Ausfahrt eines Fahrzeugs anfragen
     */
    async requestExitRaw(requestParameters: RequestExitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['propertyId'] == null) {
            throw new runtime.RequiredError(
                'propertyId',
                'Required parameter "propertyId" was null or undefined when calling requestExit().'
            );
        }

        if (requestParameters['ticketId'] == null) {
            throw new runtime.RequiredError(
                'ticketId',
                'Required parameter "ticketId" was null or undefined when calling requestExit().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['propertyId'] != null) {
            queryParameters['propertyId'] = requestParameters['propertyId'];
        }

        if (requestParameters['ticketId'] != null) {
            queryParameters['ticketId'] = requestParameters['ticketId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/parking/requestExit`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Prüft, ob ein Fahrzeug das Parkhaus verlassen kann. Wenn das Ticket als bezahlt markiert ist, wird die Ausfahrt genehmigt.
     * Ausfahrt eines Fahrzeugs anfragen
     */
    async requestExit(requestParameters: RequestExitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.requestExitRaw(requestParameters, initOverrides);
    }

}
