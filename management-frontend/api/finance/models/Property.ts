/* tslint:disable */
/* eslint-disable */
/**
 * GM Properties API
 * OpenAPI-Spezifikation der GM Properties-API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PaymentWatcherJob } from './PaymentWatcherJob';
import {
    PaymentWatcherJobFromJSON,
    PaymentWatcherJobFromJSONTyped,
    PaymentWatcherJobToJSON,
    PaymentWatcherJobToJSONTyped,
} from './PaymentWatcherJob';
import type { Expense } from './Expense';
import {
    ExpenseFromJSON,
    ExpenseFromJSONTyped,
    ExpenseToJSON,
    ExpenseToJSONTyped,
} from './Expense';
import type { Pricing } from './Pricing';
import {
    PricingFromJSON,
    PricingFromJSONTyped,
    PricingToJSON,
    PricingToJSONTyped,
} from './Pricing';

/**
 * Parkhaus
 * @export
 * @interface Property
 */
export interface Property {
    /**
     * Id
     * @type {string}
     * @memberof Property
     */
    id?: string;
    /**
     * Name des Parkhauses
     * @type {string}
     * @memberof Property
     */
    name?: string;
    /**
     * Die Stadt
     * @type {string}
     * @memberof Property
     */
    city?: string;
    /**
     * Adresse
     * @type {string}
     * @memberof Property
     */
    address?: string;
    /**
     * Anzahl Parkflächen
     * @type {number}
     * @memberof Property
     */
    capacity?: number;
    /**
     * Anzahl belegter Parkflächen
     * @type {number}
     * @memberof Property
     */
    occupied?: number;
    /**
     * Baujahr
     * @type {number}
     * @memberof Property
     */
    constructionDate?: number;
    /**
     * Bild des Parkhauses
     * @type {string}
     * @memberof Property
     */
    image?: string;
    /**
     * Bilder mit Grundrissen des Parkhauses
     * @type {Array<string>}
     * @memberof Property
     */
    floors?: Array<string>;
    /**
     * Status
     * @type {string}
     * @memberof Property
     */
    status?: PropertyStatusEnum;
    /**
     * 
     * @type {Pricing}
     * @memberof Property
     */
    pricing?: Pricing;
    /**
     * Liste der Ausgaben
     * @type {Array<Expense>}
     * @memberof Property
     */
    expenses?: Array<Expense>;
    /**
     * 
     * @type {PaymentWatcherJob}
     * @memberof Property
     */
    paymentWatcherJob?: PaymentWatcherJob;
}


/**
 * @export
 */
export const PropertyStatusEnum = {
    Offen: 'Offen',
    Geschlossen: 'Geschlossen'
} as const;
export type PropertyStatusEnum = typeof PropertyStatusEnum[keyof typeof PropertyStatusEnum];


/**
 * Check if a given object implements the Property interface.
 */
export function instanceOfProperty(value: object): value is Property {
    return true;
}

export function PropertyFromJSON(json: any): Property {
    return PropertyFromJSONTyped(json, false);
}

export function PropertyFromJSONTyped(json: any, ignoreDiscriminator: boolean): Property {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'city': json['city'] == null ? undefined : json['city'],
        'address': json['address'] == null ? undefined : json['address'],
        'capacity': json['capacity'] == null ? undefined : json['capacity'],
        'occupied': json['occupied'] == null ? undefined : json['occupied'],
        'constructionDate': json['construction_date'] == null ? undefined : json['construction_date'],
        'image': json['image'] == null ? undefined : json['image'],
        'floors': json['floors'] == null ? undefined : json['floors'],
        'status': json['status'] == null ? undefined : json['status'],
        'pricing': json['pricing'] == null ? undefined : PricingFromJSON(json['pricing']),
        'expenses': json['expenses'] == null ? undefined : ((json['expenses'] as Array<any>).map(ExpenseFromJSON)),
        'paymentWatcherJob': json['paymentWatcherJob'] == null ? undefined : PaymentWatcherJobFromJSON(json['paymentWatcherJob']),
    };
}

  export function PropertyToJSON(json: any): Property {
      return PropertyToJSONTyped(json, false);
  }

  export function PropertyToJSONTyped(value?: Property | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'city': value['city'],
        'address': value['address'],
        'capacity': value['capacity'],
        'occupied': value['occupied'],
        'construction_date': value['constructionDate'],
        'image': value['image'],
        'floors': value['floors'],
        'status': value['status'],
        'pricing': PricingToJSON(value['pricing']),
        'expenses': value['expenses'] == null ? undefined : ((value['expenses'] as Array<any>).map(ExpenseToJSON)),
        'paymentWatcherJob': PaymentWatcherJobToJSON(value['paymentWatcherJob']),
    };
}

